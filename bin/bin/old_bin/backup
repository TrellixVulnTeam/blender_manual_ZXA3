    





    #    with open(fileName, "w") as f:
    #        f.write()

    def replaceFIRST_AUTHOR(self, text):
        from_pattern="FIRST AUTHOR <EMAIL@ADDRESS>"
        to_pattern="Hoang Duy Tran <hoangduytran1960@gmail.com>"
        replaced_text,ntimes = self.replaceText(text, from_pattern, to_pattern)
        return [replaced_text,ntimes]

    def replaceLastTranslator(self, text):
        from_pattern="Last-Translator.*>"
        to_pattern="Last-Translator: Hoang Duy Tran <hoangduytran1960@googlemail.com>"
        replaced_text,ntimes = self.replaceText(text, from_pattern, to_pattern)
        #print("Replaced [{}] => []{}] #times:{}".format(text, replaced_text, ntimes))
        return [replaced_text,ntimes]

    def replaceLanguage_Team(self, text):
        from_pattern="Language-Team (.+)MIME-Version"
        to_pattern="Language-Team: London, UK <hoangduytran1960@googlemail.com>\\\\n\"\n\"Language: vi\\\\n\"\n\"MIME-Version"
        replaced_text,ntimes = self.replaceText(text, from_pattern, to_pattern)
        return [replaced_text,ntimes]

    def replacePORevisionDate(self, text):
        time_now=getTimeNow()
        print(time_now)
        date_from1="PO-Revision-Date: \d{4}-\d{2}-\d{2} \d{2}:\d{2}\+\d{4}"
        print(date_from1)
        date_from2="PO-Revision-Date.*ZONE"
        print(date_from2)
        date_to="PO-Revision-Date: " + time_now
        print(date_to)
        replaced_text,ntimes = self.replaceText(text, date_from1, date_to)
        replaced_text,ntimes = self.replaceText(text, date_from2, date_to)
        return [replaced_text,ntimes]

    def replaceGreedyMethod(self, text):
        time_now=getTimeNow()
        date_to="PO-Revision-Date: " + time_now + "\\\\n\""
        from_pattern="PO-Revision-Date(.+)MIME-Version"
        to_pattern= date_to + """
    \"Last-Translator: Hoang Duy Tran <hoangduytran1960@googlemail.com>\\\\n\"
    \"Language-Team: London, UK <hoangduytran1960@googlemail.com>\\\\n\"
    \"Language: vi\\\\n\"
    \"MIME-Version"""
        replaced_text,ntimes = self.replaceText(text, from_pattern, to_pattern, is_multi=True)
        return [replaced_text,ntimes]

    def replaceAllModifiedPO(self, input_dir):
        self.list_of_files=self.getSortedPOFileList(input_dir)
        for(index, po_file) in enumerate(self.list_of_files):
            changed=False
            text = self.readFile(po_file)
            if (text != None):
                #replaced_text,ntimes = self.replaceFIRST_AUTHOR(text)
                #changed  = (ntimes > 0)
                replaced_text,ntimes = self.insertLanguageVI(text)
                changed  = (ntimes > 0)                
                if (changed):
                    print("Replacing file: [{}]".format(po_file))
                    #print(replaced_text)
                    #self.writeTextToExistingFile(po_file, replaced_text)
            

    def replaceLastModifiedPO(self, input_dir):
        last_po_file=self.getLastUpdatedPOFile(input_dir)
        print("Last updated PO file: " + last_po_file)
        changed=False
        text = self.readFile(last_po_file)
        if (text != None):
            replaced_text,ntimes = self.replaceFIRST_AUTHOR(text)
            changed  = (ntimes > 0)
            #replaced_text,ntimes = self.insertLanguageVI(text)
            #changed  = (ntimes > 0)
            #replaced_text,ntimes = replaceLastTranslator(replaced_text)
            #changed = True if (changed == False and ntimes > 0) else False
            #replaced_text,ntimes = replaceLanguage_Team(replaced_text)
            #changed = True if (changed == False and ntimes > 0) else False
            #replaced_text,ntimes = replacePORevisionDate(replaced_text)
            #changed = True if (changed == False and ntimes > 0) else False
            #replaced_text,ntimes = insertLanguageVI(replaced_text)
            #changed = True if (changed == False and ntimes > 0) else False
            #replaced_text,ntimes = replaceGreedyMethod(replaced_text)
            #changed = True if (changed == False and ntimes > 0) else False

        #print("ABOUT to write replaced text to file")
        if (replaced_text != None):
            #print("writing replaced text to file")
            #print(replaced_text)
            #NEED to write a backup (and remove backup afterward) before allowing this to be executed
            self.writeTextToExistingFile(last_po_file, replaced_text)
            print("wrote changes to [" + last_po_file + "]")

    def findLatestChangedPOFile(self, input_dir, count):
        self.list_of_files=self.getSortedPOFileList(input_dir)
        for(index, po_file) in enumerate(self.list_of_files):
            x = 1+1
            if (index >= count): 
                break
            else:
                print("{} {}".format(po_file, os.path.getmtime(po_file))    


#if __init__="__main__":
    
#doc_dir=os.path.join(os.environ.get("BLENDER_MAN"), "locales/vi/LC_MESSAGES")
#blender_home=os.environ.get("BLENDER_GUI")
#vi_po_dir=os.path.join(blender_home, "trunk/po")
#vi_po_changed=os.environ.get("VI_PO_CHANGED")

#parser = ArgumentParser()
#parser.add_argument("-d", "--dir", dest="doc_dir", help="Directory to search for PO files")
#parser.add_argument("-c", "--count", dest="count_files", help="Number of files to list, -1 for all")

#args = parser.parse_args()
#print("args: {}".format(args))
#print("args.doc_dir: {}".format(args.doc_dir))
#print("doc_dir:".format(doc_dir))

#x = ReplacingBlenderDocText()
#x.findLatestChangedPOFile(args.doc_dir, args.count_files)

#msg="\nRemember to set environment variable\n\nexport VI_PO_CHANGED=1\n\nif you want to update vi.po's PO-Revision-Date"
#print(msg)
#if (self.vi_po_changed != None and self.vi_po_changed=="1"):
#    x.replaceLastModifiedPO(vi_po_dir)

