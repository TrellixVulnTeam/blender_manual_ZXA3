#!/bin/bash -f
SOURCE_PATH=/home/hdt/basic_english_bible/
CMD_FILE=~/cmd;
NORM_PATH="";
RESULT="";
TRUE="TRUE";
FALSE="FALSE";

touch $CMD_FILE; echo "" > $CMD_FILE; chmod u+x $CMD_FILE;
cd $SOURCE_PATH;
FileList=$(find $SOURCE_PATH -name "*.htm");

fixingOneFile(){
	fileName=$1
	fixFile $fileName "href" "[='#\"]+";
}

fixFile(){
	fileName=$1
	searchPattern=$2;
	fieldSeparator=$3;
	echo "Processing $fileName";
	hrefEntryList=$(grep -i $searchPattern $1);
	if [[ ! -z $hrefEntryList ]]; then
		#echo "List is not empty";
		for hrefEntry in $hrefEntryList; do
			if [[ ! -z $hrefEntry ]]; then
				echo "dealing with: $hrefEntry";
				fileNameToFind=$(echo $hrefEntry | awk -F $fieldSeparator '{print $2}');
				if [[ ! -z $fileNameToFind && 
						! -f $fileNameToFind &&
						"$fileNameToFind" != *"http://"* && 
						"$fileNameToFind" != *"<"* &&
						"$fileNameToFind" != *"text/"* 
						]]; then					
					pathToFind=$(dirname $fileNameToFind);
					if [[ "$pathToFind" == "." ]]; then
						pathToFind=$SOURCE_PATH;
					fi
					echo "find $pathToFind -name $fileNameToFind -print";
					fileFound=$(find $pathToFind -name $fileNameToFind -print);
					
					if [[ ! -z $fileFound ]]; then
						fileFoundDir=$(dirname $fileName);
						echo "found: $fileFound dir: $fileFoundDir";
					
						#find out if the file exist in the local dir
						localFileName=$fileFoundDir/$fileNameToFind;
						echo "localFileName: [$localFileName]";
						if [[ ! -f $localFileName ]]; then
							#reportFileFound $fileFound;
							#reportReplacingContent $fileName $fileNameToFind $fileFound;

	path_FileName=$(dirname $fileName);
	path_FileNameToFind=$(dirname $fileNameToFind);
	path_FoundFile=$(dirname $fileFound);

	echo "path_FileName: $path_FileName";
	echo "path_FileNameToFind: $path_FileNameToFind";
	echo "path_FoundFile: $path_FoundFile";	

	makeRelativePath $path_FileName $path_FoundFile;
	replaceName=$RESULT/$fileNameToFind;
	replaceName=$(echo $replaceName | sed 's/\/\//\//g');
	echo "replaceName=$replaceName";
							outputReplacingCmd $fileName $fileNameToFind $replaceName;  
						fi
					fi
				fi
			fi
		done
	fi
}

hasPath

isHtml(){
	RESULT=$FALSE;
	fileName=$1;
	if [[ "$fileName" == *"http://"* ]]; then
		RESULT=$TRUE;
	fi
}

pathLength(){
	path_01=$1;						#/home/hdt/basic_english_bible/old_t/ezekiel
	path_02=$2; 					#/home/hdt/basic_english_bible
	result=${path_01//$path_02}; 	#/old_t/ezekiel
	len_result=${#result}; 			# = 14
	len_path_01=${#path_01}; 		# = 43
	RESULT=$(expr $len_result - $len_path_01); # 14 - 43 = -29;
	echo "path_01=$path_01; path_02=$path_02; result=$result; len_result=$len_result; len_path_01=$len_path_01; pathLength=$RESULT";
}

#dealing with: href='about.htm'><font
#found: /home/hdt/basic_english_bible/about.htm dir: /home/hdt/basic_english_bible/old_t/ezekiel
#localFileName: [/home/hdt/basic_english_bible/old_t/ezekiel/about.htm]
#path_FileName: /home/hdt/basic_english_bible/old_t/ezekiel
#path_FileNameToFind: .
#path_FoundFile: /home/hdt/basic_english_bible
isFoundFileAbove(){
	echo "isFoundFileAbove()";
	path_FileName=$1;		#/home/hdt/basic_english_bible/old_t/ezekiel
	path_FoundFile=$2;		#/home/hdt/basic_english_bible
	pathLength $path_FileName $path_FoundFile ;
	if [[ $RESULT -lt 0 ]]; then
		RESULT=$TRUE;
	else
		RESULT=$FALSE;
	fi
}

#dealing with: HREF='B01C030.htm'>30</A>
#found: /home/hdt/basic_english_bible/old_t/genesis/B01C030.htm dir: /home/hdt/basic_english_bible
#localFileName: [/home/hdt/basic_english_bible/B01C030.htm]
#path_FileName: /home/hdt/basic_english_bible
#path_FileNameToFind: .
#path_FoundFile: /home/hdt/basic_english_bible/old_t/genesis
isFoundFileBelow(){
	echo "isFoundFileBelow()";
	path_FileName=$1;		#/home/hdt/basic_english_bible
	path_FoundFile=$2;		#/home/hdt/basic_english_bible/old_t/ezekiel
	pathLength $path_FoundFile $path_FileName;
	if [[ $RESULT -lt 0 ]]; then
		RESULT=$TRUE;
	else
		RESULT=$FALSE;
	fi
}

isFoundFileHere(){
	path_FileName=$1;		#/home/hdt/basic_english_bible
	path_FoundFile=$2;		#/home/hdt/basic_english_bible
	pathLength $path_FileName $path_FoundFile;
	if [[ $RESULT -eq 0 ]]; then
		RESULT=$TRUE;
	else
		RESULT=$FALSE;
	fi
}

makeRelativePath(){
	path_FileName=$1;		#path_FileName: 	/home/hdt/basic_english_bible/old_t/ezekiel
	path_FoundFile=$2; 		#path_FoundFile: 	/home/hdt/basic_english_bible
	
	isFoundFileAbove $path_FileName $path_FoundFile;
	if [[ $RESULT == $TRUE ]]; then
		echo "isFoundFileAbove()";
		path_Replace=${path_FileName//$path_FoundFile}; #/old_t/ezekiel
		path_Separators=${path_Replace//[^\/]}; # //
		RESULT=$(echo $path_Separators | sed 's/\//\.\.\//g'); # ../../
	else
		#path_FileName: 	/home/hdt/basic_english_bible
		#path_FoundFile: 	/home/hdt/basic_english_bible/old_t/ezekiel
		isFoundFileBelow $path_FileName $path_FoundFile;
		if [[ $RESULT == $TRUE ]]; then
			echo "isFoundFileBelow()";
			path_Replace=${path_FileName//$path_FoundFile}; #/old_t/ezekiel
			RESULT="."$result"/";
		else
			RESULT="./"; #found at the same path
		fi
	fi
	echo "makeRelativePath(): RESULT=[$RESULT]";
}



replaceStringBetweenDelimiter(){
	stringSource=$1;
	delimiter=$2;
	replacement=$3;

	#First, get the list of delimiters contains in the stringSource, by removing characters
	#which are not the instance of delimiter (replacing them with blanks). What remain are the
	#delimiter characters, hold in temp variable.
	temp="${stringSource//[^$delimiter]/}";

	#count the number of delimiters in temp variable.
	count=${#temp};

	#run through the stringSource, 
	for (( i=0; i<$count; i++ ));
	do
		cutPart=$(echo $stringSource | cut -s -d $delimiter -f1);
		stringSource=$(stringSource#$cutPart$delimiter);
		if [[ ! -z $cutPart ]]; then
			RESULT=$RESULT$cutPart$delimiter$replacement;
		fi
	done
}

 r="./old_t/genesis/"; while [[ "$r" != "" ]]; do a=$(echo $r | cut -s -d "/" -f1); r=${r#$a/}; echo $a; echo $r; done

escapeFilePath(){
	sourcePath=$1;
	sourcePath=$(echo $sourcePath | sed 's/\//\\\//g');
	sourcePath=$(echo $sourcePath | sed 's/\./\\\./g');
	NORM_PATH=$sourcePath;
}

outputReplacingCmd(){
	fileName=$1;
	oldPattern=$2;
	newPattern=$3;

	escapeFilePath $oldPattern; oldPattern=$NORM_PATH;
	escapeFilePath $newPattern; newPattern=$NORM_PATH;
	
	echo "fileNameToFind: [$oldPattern], fileFound: [$newPattern]"; 
	echo "sed -i -e 's/$oldPattern/$newPattern/g' $fileName" >> $CMD_FILE;
}

reportFileFound(){
	echo "file [$1] is found.";
}

reportReplacingContent(){
	fileName=$1;
	fromPattern=$2;
	toPattern=$3;
	echo "replacing [$fromPattern] to [$toPattern] in file $fileName.";
}

for OneFile in $FileList; do
	fixingOneFile $OneFile;
done


