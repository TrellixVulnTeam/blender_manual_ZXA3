#!/bin/bash
#TempFile=/tmp/temp$$;
SOURCE_PATH=$PWD;
#FIND_FILE_FLAG="\.(hhk|hhc)";
FIND_FILE_FLAG="\.(htm)";
#FIND_FILE_FLAG="$1";
#FIND_FILE_FLAG="\.(hhk)";
LAST_FOUND_PATH="";
CURRENT_PATH="./";
CMD_FILE=~/cmd;
NORM_PATH="";
RESULT="";
TRUE="TRUE";
FALSE="FALSE";
FILE_LIST=/tmp/filelist$$;


# get the list of all the file under source directory, remove directory only entries
# and sort it alphabetically. This master list will be used through-out the source code
# for searching and filtering operations. Doing this should avoid the code slow down due
# to using hard-disc.
MASTER_FILE_LIST=$(find $SOURCE_PATH | egrep "\." | sed 's/\r\n)/\n/g' | sort );
echo "$MASTER_FILE_LIST" > $FILE_LIST;

# Special situations for XML files with extension  of "hhk" or "hhc".
# Entries in this file have the following format:
# 	<param name="Local" value="../index.htm">
# or
#	<param name="Local" value="ms-its:kjvtalk.chm::/B26C004.htm">
#
function newGetUnknownRefList_hhk(){
	local FileName=$1;
	#Pattern="(href|src|background)=";
	local Pattern="Local";
	
	is_chm=$(cat $FileName | egrep "\.chm");
	if [[ -n $is_chm ]]; then
		cat $FileName | egrep "Local" | sed 's/value/\n##/' | egrep "##" | sed -e 's/##//g' -e 's/#/\n/g' | egrep "=" | sed -e 's/=//g' -e 's/"//g' -e 's/>//g' -e 's/::\//\n##/g' | grep "##" | sed 's/##//g' | egrep -i -v "(\.chm)" | sort -u;
	else
		cat $FileName | egrep "Local" | sed 's/value/\n##/' | egrep "##" | sed -e 's/##//g' -e 's/#/\n/g' | egrep "=" | sed -e 's/=//g' -e 's/"//g' -e 's/>//g' | sort -u;
	fi
}


# list the file
#	cat $FileName 	
# remove all control characters
#					| tr -d '[:cntrl:]' 
# reduce spaces down to a single space
#					| tr -s '[:space:]' 
# break the begin and end html control tags
#					| sed 's/</\n</g'   
# retain only control tags with parameter that uses files
#					| egrep -i "(href|src|background)[ \t]*(=)" 
# remove ones with external links and codes
#					| egrep -i -v "(http|mailto|document\.|\.chm)" 
# break the ending part of the code
#					| tr '[ #>]+' '\n' 
# retain only entries with files
#					| egrep "\." 
# retain only tags with parameter that uses files
#					| egrep -i "(href|src|background)" 
# remove the control tags, but mark the file entry with leading '##' - isolate the file names
#					| sed -e 's/\(href\|src\|background\)=/\n##/gI' 
# keep only the lines with filenames
#					| egrep "##" 
# remove leading '##' and quotes surounding the filename
#					| sed -e 's/##//g' -e 's/"//g' -e "s/'//g" 
# sort alphabetically and remove duplicated entries
#					| sort -u 

function newGetUnknownRefList(){
	local FileName="$1";
	local Pattern="(href|src|background)=";

		cat $FileName | tr -d '[:cntrl:]' | tr -s '[:space:]' | sed 's/</\n</g'   \
		| egrep -i "(href|src|background)[ \t]*(=)"  \
		| egrep -i -v "(http|mailto|document\.|\.chm)" | tr '[ #>]+' '\n'  | egrep "\."  \
		| egrep -i "(href|src|background)"  \
		| sed -e 's/\(href\|src\|background\)=/\n##/gI' \
		| egrep "##"  \
		| sed -e 's/##//g' -e 's/"//g' -e "s/'//g"  \
		| sort -u;
}


function commonPath(){

	local src=$1; #+ src=/home/hdt/basic_english_bible/old_t/proverbs
	local trg=$2; #+ trg=/home/hdt/basic_english_bible
	local result="";

	local src_tmp=$(echo $src | sed 's/\//;\//g' | sed 's/^;//');
	local trg_tmp=$(echo $trg | sed 's/\//;\//g' | sed 's/^;//');

	IFS=";";
	local src_arr=($src_tmp);
	local trg_arr=($trg_tmp);
	unset IFS;

	local trg_len=${#trg_arr[@]};
	local src_len=${#src_arr[@]};

	local len=$src_len;
	if [ $len -gt $trg_len ]; then 
		len=$trg_len;
	fi

	local common="";
	for (( i=0; $i < $len; i++ ));
	do
		local sword=${src_arr[$i]};
		local tword=${trg_arr[$i]};
		if [[ $sword == $tword ]]; then
			common="$common$sword";
		else
			break;
		fi
	done
	echo $common;
}

function newRelativePath(){
	local src=$1;
	local trg=$2;
	local relPath="";
	# get the common tree above if possible
	local common=$(commonPath "$src" "$trg");
	# get the length of the common part
	local common_len=${#common};

	# if no common part is found
	if [[ $common_len -eq 0 ]]; then 
		relPath=$trg;
	# if there is a common part
	else
		# trim the common part off
		local src_rem=${src#$common};
		local trg_rem=${trg#$common};		

		# the source part will be replaced with "../.."
		if [[ ! -z $src_rem ]]; then
			local src_tmp=$(echo $src_rem | sed 's/\//;\//g' | sed 's/^;//');
			IFS=";";
			local src_arr=($src_tmp);
			unset IFS;
			local src_len=${#src_arr[@]};
			for (( i=0; $i < $src_len; i++ )); do
				if [[ -z $relPath ]]; then
					relPath="..";
				else
					relPath="../$relPath";
				fi
			done
		else # source is empty, target might lead with "/"
			trg_rem=$(echo $trg_rem | sed 's/^\///');
		fi
		if [[ $trg_rem == "/." || $trg_rem == "." ]]; then
			trg_rem="";
		fi
		relPath=$relPath$trg_rem;
	fi
	echo $relPath;
}

function removeSqrBrackets(){
	echo $1 | sed 's/\[//g' | sed 's/\]//g';
}

function escapeFilePath(){
	sourcePath=$1;
	sourcePath=$(echo $sourcePath | sed 's/\//\\\//g');
	sourcePath=$(echo $sourcePath | sed 's/\./\\\./g');
	echo $sourcePath;
}

function outputCommandLine(){
	local ref=`removeSqrBrackets $1`;
	local relPath=`removeSqrBrackets $2`;
	local orig_ref=`removeSqrBrackets $3`;

	if [[ $relPath == $CURRENT_PATH ]]; then #current
		relPath=$ref;
	else
		relPath=$relPath/$ref;
	fi

	if [[ "$relPath" != "$orig_ref" ]]; then
		relPath=`escapeFilePath $relPath`;
		orig_ref=`escapeFilePath $orig_ref`;

		#echo "fileName: [$fileName], ref: [$orig_ref], relativePath: [$relPath]";
		CMD="sed -i -e 's/$orig_ref/$relPath/g' $fileName";
		echo $CMD >> $CMD_FILE;
	fi
}

function checkRef(){
	local path_FileName="$1";
	local ref="$2";

}

function fixUnknownPath(){
	local fileName="$1";
	local listOfRef="$2";
	local path_FileName=$(dirname $fileName);
	local ref="";

	for ref in $listOfRef; do
		if [[ -z $ref ]]; then
			continue;
		fi
		ref=$(echo $ref | sed 's/\r//g'); #filter out the return char.
		#keep a copy of the original reference
		local orig_ref=$ref;

		#testing to see if the reference exists and can be accessed from the path of the fileName
		cd $path_FileName; #temporary go to the path of the file
		if [[ -f $ref ]]; then # test to see if the reference can be accessed from there
			cd - >/dev/null 2>&1; # return to the original path
			continue; # ignore this ref
		else
			ref=$(basename $ref);
		fi
		cd - >/dev/null 2>&1; # return to the original path

		#find the reference in the MASTER_FILE_LIST.
		local foundFile=$(egrep -w "$ref" <<< "$MASTER_FILE_LIST");
		#local foundFile=$(egrep -w "$ref" $FILE_LIST);

		if [[ -n $foundFile ]]; then #found the unknown ref
			local path_FoundFile=$(dirname $foundFile);
#			local path_FoundFile=${foundFile%\/*.*};

			if [[ $path_FoundFile != $path_FileName ]]; then			
				local relPath=$(newRelativePath $path_FileName $path_FoundFile);
				if [[ -n $relPath ]]; then
					outputCommandLine "[$ref]" "[$relPath]" "[$orig_ref]";
				fi
			elif [[ ! -f $orig_ref ]]; then
				relPath=$CURRENT_PATH; 
				outputCommandLine "[$ref]" "[$relPath]" "[$orig_ref]";
			fi
		fi
	done
}

function fixhUnknowRefInFiles(){
	cd $SOURCE_PATH;
	echo "" > $CMD_FILE;
	chmod u+x $CMD_FILE;

	local is_hhk=$(egrep "(hhk|hhc)" <<< $FIND_FILE_FLAG);
	local FileList=$(egrep $FIND_FILE_FLAG <<< "$MASTER_FILE_LIST");
	#local FileList=$(egrep $FIND_FILE_FLAG $FILE_LIST);
	local oneFile="";
	local FoundList="";

	for oneFile in $FileList; do
		if [[ ! -z $is_hhk ]]; then
			FoundList=`newGetUnknownRefList_hhk $oneFile`;
		else
			FoundList=`newGetUnknownRefList $oneFile`;
		fi
		if [[ ! -z "$FoundList" ]]; then
			fixUnknownPath "$oneFile" "$FoundList";
		fi
	done
}

fixhUnknowRefInFiles;

