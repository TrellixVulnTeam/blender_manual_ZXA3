# Translations template for PROJECT.
# Copyright (C) 2019 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2019-11-27 19:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# Bộ Điều Chỉnh Xây Dựng -- Build Modifier
msgid "Build Modifier"
msgstr "Bộ Điều Chỉnh Xây Dựng"

msgid "The *Build* modifier causes the faces of the mesh object to appear or disappear one after the other over time."
msgstr "The *Xây Dựng -- Build* modifier causes the faces of the mesh object to appear or disappear one after the other over time."

# By default, faces appear in the order in which they are stored in memory (by default, the order of creation). The face/vertex order can be altered in Edit Mode by using :ref:`Sắp Xếp Thứ Tự Các Phần Tử Khung Lưới -- Sort Mesh Elements <mesh-edit-sort-elements>`.
msgid "By default, faces appear in the order in which they are stored in memory (by default, the order of creation). The face/vertex order can be altered in Edit Mode by using :ref:`Sort Mesh Elements <mesh-edit-sort-elements>`."
msgstr "By default, faces appear in the order in which they are stored in memory (by default, the order of creation). The face/vertex order can be altered in Edit Mode by selecting :doc:`Sort Mesh Elements </modeling/meshes/editing/misc>` from the operator search menu :kbd:`Spacebar`."

# Tùy Chọn -- Options
msgid "Options"
msgstr "Tùy Chọn"

# Bộ Điều Chỉnh Xây Dựng -- Build Modifierựng -- Build Modifier
msgid "The Build modifier."
msgstr "Bộ Điều Chỉnh Xây Dựng -- Build Modifier"

# Khởi Đầu -- Start
msgid "Start"
msgstr "Khởi Đầu"

msgid "The start frame of the building process."
msgstr "The start frame of the building process."

# Chiều Dài -- Length
msgid "Length"
msgstr "Chiều Dài"

msgid "The number of frames over which to rebuild the object."
msgstr "The number of frames over which to rebuild the object."

# Ngẫu Nhiên Hóa -- Randomize
msgid "Randomize"
msgstr "Ngẫu Nhiên Hóa"

msgid "Randomizes the order in which the faces are built."
msgstr "Randomizes the order in which the faces are built."

# Mầm -- Seed
msgid "Seed"
msgstr "Mầm"

msgid "The random seed. Changing this value gives a different \"random\" order when *Randomize* is checked. This order is always the same for a given seed/mesh set."
msgstr "The random seed. Changing this value gives a different \"random\" order when *Ngẫu Nhiên Hóa -- Randomize* is checked. This order is always the same for a given seed/mesh set."

# Đảo Nghịch -- Reversed
msgid "Reversed"
msgstr "Đảo Nghịch"

msgid "The modifier will operate in reverse, essentially allowing it to be used as a \"deconstruction\" effect. This is useful for making a set of dupli-objects gradually disappear."
msgstr "The modifier will operate in reverse, essentially allowing it to be used as a \"deconstruction\" effect. This is useful for making a set of dupli-objects gradually disappear."

# Ví Dụ -- Example
msgid "Example"
msgstr "Ví Dụ"

msgid "The *Build* modifier is often useful when needing a way to get a large number of items to progressively appear, without resorting to animating the visibility of each one by one. Examples of this include a mesh containing vertices only, which is used as an :doc:`Instance Verts emitter </scene_layout/object/properties/instancing/verts>`, and has the build modifier on it. Such a setup is a workaround/technique for being able to art-direct some semi-random layout of a collection of objects (i.e. leaves/balls forming a carpet of sorts) when doing so with particles is not desirable (e.g. due to undesirable distribution of items leaving random gaps and overlapping in other places)."
msgstr "The *Xây Dựng -- Build* modifier is often useful when needing a way to get a large number of items to progressively appear, without resorting to animating the visibility of each one by one. Examples of this include a mesh containing vertices only, which is used as an :doc:`Instance Verts emitter </scene_layout/object/properties/instancing/verts>`, and has the build modifier on it. Such a setup is a workaround/technique for being able to art-direct some semi-random layout of a collection of objects (i.e. leaves/balls forming a carpet of sorts) when doing so with particles is not desirable (e.g. due to undesirable distribution of items leaving random gaps and overlapping in other places)."

