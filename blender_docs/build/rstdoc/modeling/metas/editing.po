# Translations template for PROJECT.
# Copyright (C) 2019 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2019-11-27 19:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

# Biên Soạn -- Editing
msgid "Editing"
msgstr "Biên Soạn"

msgid "In addition to having several meta objects in a same family, you can also have several meta primitives in a single object (just add some more while in Edit Mode). Each will be an element, with its own shape, editing rings (in the viewport), and settings."
msgstr "In addition to having several meta objects in a same family, you can also have several meta primitives in a single object (just add some more while in Edit Mode). Each will be an element, with its own shape, editing rings (in the viewport), and settings."

# Phần Tử Đang Hoạt Động -- Active Element
msgid "Active Element"
msgstr "Phần Tử Đang Hoạt Động"

# Tham Chiếu -- Reference
msgid "Reference"
msgstr "Tham Chiếu"

msgid "Mode"
msgstr "Chế Độ"

msgid "Edit Mode"
msgstr "Chế Độ Biên Soạn"

msgid "Panel"
msgstr "Bảng"

# :menuselection:`Properties editor --> Metaball --> Active Element`
msgid ":menuselection:`Properties editor --> Metaball --> Active Element`"
msgstr ":menuselection:`Trình Biên Soạn Tính Chất (Properties editor) --> Phần Tử Đang Hoạt Động (Active Element)`"

# Phần Tử Đang Hoạt Động -- Active Elementg -- Active Element
msgid "Active Element panel."
msgstr "Phần Tử Đang Hoạt Động -- Active Element"

msgid "These settings apply only to the selected meta element."
msgstr "These settings apply only to the selected meta element."

# Thể Loại -- Type
msgid "Type"
msgstr "Thể Loại"

msgid "Changes the :doc:`primitive shape </modeling/metas/primitives>` of the meta object."
msgstr "Changes the :doc:`primitive shape </modeling/metas/primitives>` of the meta object."

# Độ Cứng -- Stiffness
msgid "Stiffness"
msgstr "Độ Cứng"

msgid "Controls the influence range for individual meta elements, unlike *Influence Threshold* which controls the influence for the entire :ref:`meta family <meta-ball-object-families>`. This essentially defines how sensitive a meta is to being affected by other metas. With a low stiffness, the meta will begin to deform from further away. A higher value means the meta needs to be close to another one to begin merging. The *Stiffness* is visualized by the *green ring* and can be selected and :ref:`scaled <bpy.ops.transform.resize>` to also changes the *Stiffness* value."
msgstr "Controls the influence range for individual meta elements, unlike *Giới Hạn Tác Động -- Influence Threshold* which controls the influence for the entire :ref:`meta family <meta-ball-object-families>`. This essentially defines how sensitive a meta is to being affected by other metas. With a low stiffness, the meta will begin to deform from further away. A higher value means the meta needs to be close to another one to begin merging. The *Độ Cứng -- Stiffness* Stiffness* is visualized by the *green ring* and can be selected and :ref:`scaled <bpy.ops.transform.resize>` to also changes the *Stiffness* value."

msgid "To be visible, the *Stiffness* must be slightly larger than the *Threshold* value."
msgstr "To be visible, the *Độ Cứng -- Stiffness* must be slightly larger than the *Ngưỡng -- Threshold* value."

msgid "The left meta ball, has a smaller *Stiffness* value than the right one."
msgstr "The left meta ball, has a smaller *Độ Cứng -- Stiffness* value than the right one."

# Bán Kính -- Radius
msgid "Radius"
msgstr "Bán Kính"

msgid "Controls the physical size of the metaball. This works the same as scaling the metaball in object mode. The *Radius* is visualized by the *white ring* and can be selected and :ref:`scaled <bpy.ops.transform.resize>` to also changes the *Radius* value."
msgstr "Controls the physical size of the metaball. This works the same as scaling the metaball in object mode. The *Bán Kính -- Radius*h -- Radius* is visualized by the *white ring* and can be selected and :ref:`scaled <bpy.ops.transform.resize>` to also changes the *Radius* value."

# Âm -- Negative
msgid "Negative"
msgstr "Âm"

msgid "Controls whether the influence is *positive* or *negative*."
msgstr "Controls whether the influence is *dương -- positive* or *âm -- negative*."

msgid "A *positive* influence is defined as an attraction, meaning that the meshes will stretch towards each other as the *rings of influence* intersect. The opposite effect would be a *negative* influence where the objects repel each other."
msgstr "A *dương -- positive* influence is defined as an attraction, meaning that the meshes will stretch towards each other as the *rings of influence* intersect. The opposite effect would be a *âm -- negative* influence where the objects repel each other."

msgid "If a metaball has *Negative* influence the meta is not visible in the 3D Viewport, only the surrounding circles are shown."
msgstr "If a metaball has *Âm -- Negative* influence the meta is not visible in the 3D Viewport, only the surrounding circles are shown."

msgid "Positive influence of three meta balls."
msgstr "Positive influence of three meta balls."

msgid "Negative influence of a meta ball; the first is negative and the second positive."
msgstr "Negative influence of a meta ball; the first is negative and the second positive."

# Ẩn -- Hide
msgid "Hide"
msgstr "Ẩn"

# As in :ref:`object-show-hide` in Object Mode, you can hide the selected meta(s), and then reveal what was hidden. This is very handy for cleaning your views up a bit.
msgid "As in :ref:`object-show-hide` in Object Mode, you can hide the selected meta(s), and then reveal what was hidden. This is very handy for cleaning your views up a bit."
msgstr "As in :ref:`object-show-hide` in *Object Mode*, you can hide the selected meta(s), and then reveal what was hidden. This is very handy for cleaning your views up a bit... Note that the two red and green rings always remain visible in *Edit Mode*, as well as the select circle (in *Object Mode*...)."

msgid "Hiding a meta does not *only* hide it, but also disables it from the meta computation, which will affect the final geometry."
msgstr "Hiding a meta does not *only* hide it, but also disables it from the meta computation, which will affect the final geometry."

msgid "The two red and green rings always remain visible in Edit Mode, as well as the select circle in Object Mode."
msgstr "The two red and green rings always remain visible in Edit Mode, as well as the select circle in Object Mode."

msgid "Deleting Elements"
msgstr "Deleting Elements"

msgid "Hotkey"
msgstr "Phím Tắt"

msgid ":kbd:`X`, :kbd:`Delete`"
msgstr ":kbd:`X`, :kbd:`Delete`"

msgid "You can only delete the active element, no fancy options here."
msgstr "You can only delete the active element, no fancy options here."

msgid "Conversion"
msgstr "Conversion"

# To convert the meta to a real mesh, use :ref:`object-convert-to` in Object ModeChuyển Đổi Sang -- Convert Tot the meta to a real mesh, use :ref:`object-convert-to` in Object Mode.
msgid "To convert the meta to a real mesh, use :ref:`object-convert-to` in Object Mode."
msgstr "To convert the meta, using :ref:`object-convert-to` in Object Mode."

msgid "Object Families"
msgstr "Object Families"

msgid "A \"family\" is a way to regroup several meta objects, producing something very similar to having several metas inside the same object."
msgstr "A \"family\" is a way to regroup several meta objects, producing something very similar to having several metas inside the same object."

msgid "It is defined by the left part of an object's name (the one before the first dot). Remember, an object's name is the one in the *Object Name* field, in most panels, **not** the *Metaball Name* field, which is the meta data-block's name... For example, the *family* part of \"MetaPlane.001\" is ``MetaPlane``. Each meta object in the same \"family\" is associated with one another as discussed below."
msgstr "It is defined by the left part of an object's name (the one before the first dot). Remember, an object's name is the one in the *Tên Vật Thể -- Object Name* field, in most panels, **đảo nghịch -- not** the *Metaball Name* field, which is the meta data-block's name... For example, the *family* part of \"MetaPlane.001\" is ``MetaPlane``. Each meta object in the same \"family\" is associated with one another as discussed below."

msgid "Metaball family."
msgstr "Metaball family."

msgid "Families of metas are controlled by a *base* meta object which is identified by an object name **without** a dot in it. For example, if we have three metas called ``MetaThing``, ``MetaThing.001``, ``MetaThing.round``, the *base* meta object would be ``MetaThing``."
msgstr "Families of metas are controlled by a *cơ sở -- base* -- base* meta object which is identified by an object name **without** a dot in it. For example, if we have three metas called ``MetaThing``, ``MetaThing.001``, ``MetaThing.round``, the *base* meta object would be ``MetaThing``."

msgid "The *base* meta object determines the basis, the resolution, the threshold, *and* the transformations. It also has the material and texture area. In a way, the *base* meta is the \"owner\" of the other metas in the family (i.e. it is as if the other metas were \"included\" or joined into the base one)."
msgstr "The *cơ sở -- base* -- base* meta object determines the basis, the resolution, the th*và -- and*ld, *and* the transformations. It also has the material and texture area. In a way, the *base* meta is the \"owner\" of the other metas in the family (i.e. it is as if the other metas were \"included\" or joined into the base one)."

msgid "When working with multiple scenes, take care naming your meta objects so the *base* is always in the same scene as other metas."
msgstr "When working with multiple scenes, take care naming your meta objects so the *cơ sở -- base* is always in the same scene as other metas."

msgid "Failing to do so will give confusing behaviors (like invisible meta objects)."
msgstr "Failing to do so will give confusing behaviors (like invisible meta objects)."

# Ví Dụ -- Examples
msgid "Examples"
msgstr "Ví Dụ"

# Fig. :ref:`fig-meta-ball-base` shows the *cơ sở -- base* meta labeled "B". The other two *Siêu Vật Thể -- Meta* objects are *con cái -- children*. Children's selection rings are always black, while the group's mesh is orange. Because the metas are grouped, they form a unified mesh which can always be selected by selecting the mesh of any meta in the group.
msgid "Fig. :ref:`fig-meta-ball-base` shows the *base* meta labeled \"B\". The other two *Meta* objects are *children*. Children's selection rings are always black, while the group's mesh is orange. Because the metas are grouped, they form a unified mesh which can always be selected by selecting the mesh of any meta in the group."
msgstr "Fig. :ref:`fig-meta-ball-base` shows the *base* meta labeled \"B\". The other two *Meta* objects are *children*. Children's selection rings are always black, while the group's mesh is orange. Because the metas are grouped, they form a unified mesh which can always be selected by selecting the mesh of any meta in the group. For example, in Fig. :ref:`fig-meta-ball-base`, only the lower sphere (the parent) has been selected, and you see that both the parent's mesh *and* all of the children's meshes are now highlighted."

msgid "Meta ball base."
msgstr "Meta ball base."

msgid "For example, in Fig. :ref:`fig-meta-ball-base`, only the lower sphere (the parent) has been selected, and you see that both the parent's mesh *and* all of the children's meshes are now highlighted."
msgstr "For example, in Fig. :ref:`fig-meta-ball-base`, only the lower sphere (the parent) has been selected, and you see that both the parent's mesh *và -- and* all of the children's meshes are now highlighted."

msgid "Scaling the \"base\"."
msgstr "Scaling the \"base\"."

msgid "The *base* meta object controls the *polygonalization* (mesh structure) for the group, and as such, also controls the polygonalization for the children (non-base) metas. If we transform the *base* meta, the children's polygonalization changes. However, if we transform the children, the polygonalization remains unchanged."
msgstr "The *cơ sở -- base* -- base* meta object cont*đa giác hóa -- polygonalization*lization* (mesh structure) for the group, and as such, also controls the polygonalization for the children (non-base) metas. If we transform the *base* meta, the children's polygonalization changes. However, if we transform the children, the polygonalization remains unchanged."

msgid "This discussion of \"polygonization\" does *not* mean that the various meshes do not deform towards or away from each other (meta objects always influence one another in the usual way, within a same family)."
msgstr "This discussion of \"polygonization\" does *đảo nghịch -- not* mean that the various meshes do not deform towards or away from each other (meta objects always influence one another in the usual way, within a same family)."

msgid "Rather, it means that the underlying mesh structure changes only when the *base* object transforms. For example, if you scale the *base*, the children's mesh structure changes."
msgstr "Rather, it means that the underlying mesh structure changes only when the *cơ sở -- base* -- base* object transforms. For example, if you scale the *base*, the children's mesh structure changes."

msgid "In Fig. :ref:`fig-meta-ball-scale`, the *base* has been scaled down, which has the effect of scaling the mesh structure of each of the children. As you can see, the children's mesh resolution has increased, while the *base* decreased. The children did *not* change size!"
msgstr "In Fig. :ref:`fig-meta-ball-scale`, the *cơ sở -- base* -- base* has been scaled down, which has the effect of scaling the mesh structure of each of the children. As you can see, the children's mesh resolution has increased, while the *base* decreased. The children did *đảo nghịch -- not* change size!"

