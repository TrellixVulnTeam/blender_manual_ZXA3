# Translations template for PROJECT.
# Copyright (C) 2019 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2019-12-08 18:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

msgid "Python Scripting Mode"
msgstr "Chế Độ Tập Lệnh Python -- Python Scripting Mode"

msgid "The Python Scripting mode offers full programmable line stylizes. In this control mode, all styling operations are written as Python scripts referred to as style modules in the Freestyle terminology. The input to a style module is a view map (i.e. a set of detected feature edges), and the output is a set of stylized strokes."
msgstr "The Python Scripting chế độ offers toàn phần programmable đường thẳng/dòng stylizes. Vào cái/điều này điều khiển chế độ, toàn bộ styling các thao tác là written tựa như Python tập lệnh referred tới tựa như kiểu modules vào the Phong Cách Tự Do terminology. The đầu vào tới một kiểu mô-đun là một góc nhìn ánh xạ (i.e. một đặt của detected chức năng/nét đặc trưng cạnh), và the đầu ra là một đặt của stylized nét vẽ."

msgid "A style module is composed of successive calls of five basic operators: selection, chaining, splitting, sorting and stroke creation. The selection operator identifies a subset of input feature edges based on one or more user-defined selection conditions (predicates). The selected edges are processed with the chaining, splitting and sorting operators to build chains of feature edges. These operators are also controlled by user-supplied predicates and functions in order to determine how to transform the feature edges into chains. Finally, the chains are transformed into stylized strokes by the stroke creation operator, which takes a list of user-defined stroke shaders."
msgstr "Một kiểu mô-đun là composed của successive calls của năm đơn giản thao tác: lựa chọn, chuyền nối, splitting, sắp thứ tự và nét vẽ creation. The lựa chọn thao tác identifies một tập hợp con của đầu vào chức năng/nét đặc trưng cạnh based bật một hoặc nhiều/lớn hơn user-defined lựa chọn conditions (predicates). The cái được chọn cạnh là processed với the chuyền nối, splitting và sắp thứ tự thao tác tới xây dựng chains của chức năng/nét đặc trưng cạnh. Điều/Cái/Việc Này thao tác là also controlled by user-supplied predicates và functions vào theo thứ tự tới determine thế nào tới biến hóa the chức năng/nét đặc trưng cạnh thành chains. Finally, the chains là transformed thành stylized nét vẽ by the nét vẽ creation thao tác, cái mà/tức takes một liệt kê của user-defined nét vẽ bộ tô bóng."

msgid "Python style modules are stored within blend-files as text data-blocks. External style module files first need to be loaded in the Text Editor. Then the select menu within an entry of the style module stack allows you to select a module from the list of loaded style modules."
msgstr "Python kiểu modules là stored within blend-files tựa như văn bản khối dữ liệu. Bên Ngoài kiểu mô-đun tập tin đầu tiên/thứ nhất need tới be loaded vào the Văn Bản Trình Biên Soạn. Then the chọn trình đơn within một entry của the kiểu mô-đun stack cho phép bạn tới chọn một mô-đun từ the liệt kê của loaded kiểu modules."

msgid "A screen capture of a style module ``cartoon.py`` loaded in the Text Editor (left), as well as Freestyle options in the Python Scripting mode in the View Layers buttons (right)."
msgstr "Một màn hình capture của một kiểu mô-đun ``cartoon.py`` loaded vào the Văn Bản Trình Biên Soạn (trái), tựa như well tựa như Phong Cách Tự Do tùy chọn vào the Python Scripting chế độ vào the Góc Nhìn Các Tầng Lớp nút bấm (phải)."

msgid "Freestyle for Blender comes with a number of Python style modules that can serve as a starting point of your own style module writing. See also the section of the Freestyle Python API in the Blender Python API reference manual for the full detail of style module constructs."
msgstr "Phong Cách Tự Do dành cho Blender comes với một số của Python kiểu modules đó/mà có thể serve tựa như một khởi đầu điểm/chấm của của bạn của bản thân/sở hữu kiểu mô-đun viết/ghi. Xin Xem Thêm also the phần của the Phong Cách Tự Do Python API vào the Blender Python API tham chiếu thủ công/sách hướng dẫn sử dụng dành cho the toàn phần chi tiết của kiểu mô-đun các cấu trúc."

msgid "By T.K. using the Python Scripting mode (`blend-file <https://wiki.blender.org/wiki/File:Turning_Pages.zip>`__, CC0)."
msgstr "By T.K. sử dụng/dùng the Python Scripting chế độ (`-- blend-file <https://wiki.blender.org/wiki/File:Turning_Pages.zip>`__, CC0)."

msgid "By T.K. using the Python Scripting mode (`blend-file <https://wiki.blender.org/wiki/File:Lily_Broken_Topology.zip>`__, CC0)."
msgstr "By T.K. sử dụng/dùng the Python Scripting chế độ (`-- blend-file <https://wiki.blender.org/wiki/File:Lily_Broken_Topology.zip>`__, CC0)."

msgid "Writing Style Modules"
msgstr "Viết/Ghi Kiểu Modules -- Writing Style Modules"

msgid "A style module is a piece of code responsible for the stylization of Freestyle line drawing. The input of a style module is a set of feature edges called view map (ViewMap). The output is a set of stylized lines also referred to as strokes. A style module is structured as a pipeline of operations that allow for building strokes from the input edges within the view map."
msgstr "Một kiểu mô-đun là một piece của code chịu trách nhiệm dành cho the stylization của Phong Cách Tự Do đường thẳng/dòng vẽ. The đầu vào của một kiểu mô-đun là một đặt của chức năng/nét đặc trưng cạnh called góc nhìn ánh xạ (ViewMap). The đầu ra là một đặt của stylized (số) đường kẻ/thẳng/dòng also referred tới tựa như nét vẽ. Một kiểu mô-đun là structured tựa như một quy trình của các thao tác đó/mà cho phép dành cho xây dựng/biên dịch nét vẽ từ the đầu vào cạnh within the góc nhìn ánh xạ."

msgid "There are five kinds of operations (listed with corresponding operator functions):"
msgstr "Kia/Có là năm kinds của các thao tác (listed với tương ứng thao tác functions):"

msgid "Selection ``Operators.select()``"
msgstr "Lựa Chọn ``Operators.select()``"

msgid "Chaining ``Operators.chain(), Operators.bidirectional_chain()``"
msgstr "Chuyền Nối ``Operators.chain(), Operators.bidirectional_chain()``"

msgid "Splitting ``Operators.sequential_split(), Operators.recursive_split()``"
msgstr "Splitting ``Operators.sequential_split(), Operators.recursive_split()``"

msgid "Sorting ``Operators.sort()``"
msgstr "Sắp Thứ Tự ``Operators.sort()``"

msgid "Stroke creation ``Operators.create()``"
msgstr "Nét Vẽ creation ``Operators.create()``"

msgid "The input view map is populated with a set of ViewEdge objects. The selection operation is used to pick up ViewEdges of interest to artists based on user-defined selection conditions (predicates). Chaining operations take the subset of ViewEdges and build Chains by concatenating ViewEdges according to user-defined predicates and functions. The Chains can be further refined by splitting them into smaller pieces (e.g. at points where edges make an acute turn) and selecting a fraction of them (e.g. to keep only those longer than a length threshold). The sorting operation is used to arrange the stacking order of chains to draw one line on top of another. The chains are finally transformed into stylized strokes by the stroke creation operation applying a series of stroke shaders to individual chains."
msgstr "The đầu vào góc nhìn ánh xạ là populated với một đặt của ViewEdge vật thể. The lựa chọn thao tác là sử dụng tới chọn lên/trên ViewEdges của interest tới artists based bật user-defined lựa chọn conditions (predicates). Chuyền Nối các thao tác take the tập hợp con của ViewEdges và xây dựng Chains by concatenating ViewEdges according tới user-defined predicates và functions. The Chains có thể be further refined by splitting them thành smaller pieces (e.g. tại số điểm where cạnh tạo một acute turn) và lựa chọn một phân số của them (e.g. tới duy trì only those longer than một chiều dài ngưỡng). The sắp thứ tự thao tác là sử dụng tới arrange the stacking theo thứ tự của chains tới vẽ một đường thẳng/dòng bật trên/đỉnh của another. The chains là finally transformed thành stylized nét vẽ by the nét vẽ creation thao tác applying một series của nét vẽ bộ tô bóng tới cá nhân chains."

msgid "ViewEdges, Chains and Strokes are generically referred to as one-dimensional (1D) elements. A 1D element is a polyline that is a series of connected straight lines. Vertices of 1D elements are called 0D elements in general."
msgstr "ViewEdges, Chains và Nét Vẽ là generically referred tới tựa như one-dimensional (1D) phần tử. Một 1D element là một đường đa giác đó/mà là một series của kết nối thẳng (số) đường kẻ/thẳng/dòng. Điểm Đỉnh của 1D phần tử là called 0D phần tử vào chung chung."

msgid "All the operators act on a set of active 1D elements. The initial active set is the set of ViewEdges in the input view map. The active set is updated by the operators."
msgstr "Toàn Bộ the thao tác act bật một đặt của đang/hoạt động 1D phần tử. The khởi đầu đang/hoạt động đặt là the đặt của ViewEdges vào the đầu vào góc nhìn ánh xạ. The đang/hoạt động đặt là updated by the thao tác."

msgid "Selection"
msgstr "Lựa Chọn -- Selection"

msgid "The selection operator goes through every element of the active set and keeps only the ones satisfying a certain predicate. The ``Operators.select()`` method takes as the argument a unary predicate that works on any ``Interface1D`` that represents a 1D element. For example::"
msgstr "The lựa chọn thao tác đi through mọi/mỗi element của the đang/hoạt động đặt và keeps only the ones satisfying một certain predicate. The ``Operators.select()`` phương pháp takes tựa như the argument một unary predicate đó/mà works bật bất cứ ``-- Interface1D`` đó/mà represents một 1D element. Lấy ví dụ::"

msgid "This selection operation uses the ``QuantitativeInvisibilityUP1D`` predicate to select only the visible ``ViewEdge`` (more precisely, those whose quantitative invisibility is equal to 0). The selection operator is intended to selectively apply the style to a fraction of the active 1D elements."
msgstr "Cái/Điều Này lựa chọn thao tác uses the ``-- QuantitativeInvisibilityUP1D`` predicate tới chọn only the hữu hình ``-- ViewEdge`` (nhiều/lớn hơn precisely, those whose quantitative invisibility là bằng nhau tới 0). The lựa chọn thao tác là intended tới selectively áp dụng the kiểu tới một phân số của the đang/hoạt động 1D phần tử."

msgid "It is noted that ``QuantitativeInvisibilityUP1D`` is a class implementing the predicate that tests line visibility, and the ``Operators.select()`` method takes an instance of the predicate class as argument. The testing of the predicate for a given 1D element is actually done by calling the predicate instance, that is, by invoking the ``__call__`` method of the predicate class. In other words, the ``Operators.select()`` method takes as argument a functor which in turn takes an ``Interface0D`` object as argument. The Freestyle Python API employs functors extensively to implement predicates, as well as functions."
msgstr "It là noted đó/mà ``-- QuantitativeInvisibilityUP1D`` là một class implementing the predicate đó/mà tests đường thẳng/dòng ẩn-hiện/tầm nhìn, và the ``Operators.select()`` phương pháp takes một instance của the predicate class tựa như argument. The thử nghiệm của the predicate dành cho một given 1D element là actually done by calling the predicate instance, đó/mà là, by invoking the ``-- __call__`` phương pháp của the predicate class. Vào cái/sắp đặt khác words, the ``Thao Tác.chọn()`` phương pháp takes tựa như argument một functor cái mà/tức vào turn takes một vào turn takes một ``Interface0D`` vật thể tựa như argument. The Phong Cách Tự Do Python API employs functors extensively tới implement predicates, tựa như well tựa như functions.ns."

msgid "Chaining"
msgstr "Chuyền Nối -- Chaining"

msgid "The chaining operators act on the set of active ``ViewEdge`` objects and determine the topology of the future strokes. The idea is to implement an iterator to traverse the ViewMap graph by marching along ViewEdges. The iterator defines a chaining rule that determines the next ``ViewEdge`` to follow at a given vertex (see ``ViewEdgeIterator``). Several such iterators are provided as part of the Freestyle Python API (see ``ChainPredicateIterator`` and ``ChainSilhouetteIterator``). Custom iterators can be defined by inheriting the ``ViewEdgeIterator`` class. The chaining operator also takes as argument a UnaryPredicate working on ``Interface1D`` as a stopping criteria. The chaining stops when the iterator has reached a ``ViewEdge`` satisfying this predicate during the march along the graph."
msgstr "The chuyền nối thao tác act bật the đặt của đang/hoạt động ``-- ViewEdge`` vật thể và determine the cấu trúc liên kết của the future nét vẽ. The ý tưởng là tới implement một iterator tới traverse the ViewMap biểu đồ by marching along ViewEdges. The iterator defines một chuyền nối rule đó/mà determines the tiếp theo ``ViewEdge`` tới đi theo tại một given điểm đỉnh (xin xem thêm  đỉnh (xin xem thêm ``ViewEdgeIterator``). Several such iterators là provided tựa như phần của the Phong Cách Tự Do Python API (xin xem thêm ``ChainPredicateIterator`` và ``ChainSilhouetteIterator``). Tùy Chỉnh iterators có thể be defined by inheriting the ó thể be defined by inheriting the ``ViewEdgeIterator`` class. The chuyền nối thao tác also takes tựa như argument một UnaryPredicate working bật  working bật ``Interface1D`` tựa như một stopping chỉ tiêu. The chuyền nối stops khi the iterator có reached một  a ``-- ViewEdge`` satisfying cái/điều này predicate during the march along the biểu đồ."

msgid "Chaining can be either unidirectional ``Operators.chain()`` or bidirectional ``Operators.bidirectional_chain()``. In the latter case, the chaining will propagate in the two directions from the starting edge."
msgstr "Chuyền Nối có thể be hoặc là unidirectional ``Operators.chain()`` hoặc bidirectional ``Operators.bidirectional_chain()``. Vào the latter kiểu chữ, the chuyền nối sẽ lan truyền vào the hai directions từ the khởi đầu cạnh."

msgid "The following is a code example of bidirectional chaining::"
msgstr "The following là một code ví dụ của bidirectional chuyền nối::"

msgid "The chaining operator uses the ``ChainSilhouetteIterator`` as the chaining rule and stops chaining as soon as the iterator has come to an invisible ``ViewEdge``."
msgstr "The chuyền nối thao tác uses the ``-- ChainSilhouetteIterator`` tựa như the chuyền nối rule và stops chuyền nối tựa như soon tựa như the iterator có come tới một invisible ``-- ViewEdge``."

msgid "The chaining operators process the set of active ``ViewEdge`` objects in order. The active ViewEdges can be previously sorted using the ``Operators.sort()`` method (see below). It starts a chain with the first ``ViewEdge`` of the active set. All ViewEdges that have already been involved in the chaining process are marked (in the case of the example above, the time stamp of each ``ViewEdge`` is modified by default), in order not to process the same ``ViewEdge`` twice. Once the chaining reaches a ``ViewEdge`` that satisfies the stopping predicate, the chain is terminated. Then a new chain is started from the first unmarked ``ViewEdge`` in the active set. This operation is repeated until the last unmarked ``ViewEdge`` of the active set was processed. At the end of the chaining operation, the active set is set to the Chains that have just been constructed."
msgstr "The chuyền nối thao tác process the đặt của đang/hoạt động ``-- ViewEdge`` vật thể vào theo thứ tự. The đang/hoạt động ViewEdges có thể be previously sorted sử dụng/dùng the ``Operators.sort()`` phương pháp (xin xem thêm below). It starts một chain với the đầu tiên/thứ nhất ``-- ViewEdge`` của the đang/hoạt động đặt. Toàn Bộ ViewEdges đó/mà có already been involved vào the chuyền nối process là marked (vào the kiểu chữ của the ví dụ above, the thời gian stamp của each ``-- ViewEdge`` là đã bị sửa đổi by mặc định), vào theo thứ tự đảo nghịch tới process the same ``-- ViewEdge`` twice. Once the chuyền nối reaches một ``-- ViewEdge`` đó/mà satisfies the stopping predicate, the chain là terminated. Then một tạo mới chain là started từ the đầu tiên/thứ nhất unmarked ``-- ViewEdge`` vào the đang/hoạt động đặt. Cái/Điều Này thao tác là repeated until the cuối unmarked ``-- ViewEdge`` của the đang/hoạt động đặt was processed. Tại the kết thúc của the chuyền nối thao tác, the đang/hoạt động đặt là đặt tới the Chains đó/mà có just been constructed."

msgid "Splitting"
msgstr "Splitting"

msgid "The splitting operation is used to refine the topology of each Chain. Splitting is performed either sequentially or recursively. Sequential splitting ``Operators.sequentialSplit()`` in its basic form, parses the Chain at a given arbitrary resolution and evaluates a unary predicate (working on 0D elements) at each point along the Chain. Every time the predicate is satisfied, the chain is split into two chains. At the end of the sequential split operation, the active set of chains is set to the new chains. ::"
msgstr "The splitting thao tác là sử dụng tới tinh chỉnh the cấu trúc liên kết của each Chain. Splitting là performed hoặc là sequentially hoặc recursively. Tuần Tự splitting ``Operators.sequentialSplit()`` vào của nó đơn giản form, parses the Chain tại một given arbitrary độ phân giải và evaluates một unary predicate (working bật 0D phần tử) tại each điểm/chấm along the Chain. Mọi/Mỗi thời gian the predicate là satisfied, the chain là tách phân thành hai chains. Tại the kết thúc của the tuần tự tách phân thao tác, the đang/hoạt động đặt của chains là đặt tới the tạo mới chains. ::"

msgid "In this example, the chain is split every 2 units. A more elaborated version uses two predicates instead of one: One to determine the starting point of the new chain and the other to determine its ending point. This second version can lead to a set of Chains that are disjoint or that overlap if the two predicates are different (see ``Operators.sequentialSplit()`` for more details)."
msgstr "Vào cái/điều này ví dụ, the chain là tách phân mọi/mỗi 2 đơn vị. Một nhiều/lớn hơn elaborated phiên bản uses hai predicates instead của một: Một tới determine the khởi đầu điểm/chấm của the tạo mới chain và the cái/sắp đặt khác tới determine của nó ending điểm/chấm. Cái/Điều Này thứ hai phiên bản có thể chì tới một đặt của Chains đó/mà là disjoint hoặc đó/mà đè gối if the hai predicates là khác (xin xem thêm ``Operators.sequentialSplit()`` dành cho nhiều/lớn hơn chi tiết)."

msgid "Recursive splitting ``Operators.recursiveSplit()`` evaluates a function on the 0D elements along the Chain at a given resolution and find the point that gives the maximum value for the function. The Chain is then split into two at that point. This process is recursively repeated on each of the two new Chains, until the input Chain satisfies a user-specified stopping condition. ::"
msgstr "Recursive splitting ``Operators.recursiveSplit()`` evaluates một function bật the 0D phần tử along the Chain tại một given độ phân giải và lùng tìm the điểm/chấm đó/mà gives the tối đa giá trị dành cho the function. The Chain là then tách phân thành hai tại đó/mà điểm/chấm. Cái/Điều Này process là recursively repeated bật each của the hai tạo mới Chains, until the đầu vào Chain satisfies một user-specified stopping condition. ::"

msgid "In the code example above, the Chains are recursively split at points of the highest 2D curvature. The curvature is evaluated at points along the Chain at a resolution of 5 units. Chains shorter than 5 units will not be split anymore."
msgstr "Vào the code ví dụ above, the Chains là recursively tách phân tại số điểm của the cao nhất 2D curvature. The curvature là evaluated tại số điểm along the Chain tại một độ phân giải của 5 đơn vị. Chains shorter than 5 đơn vị sẽ đảo nghịch be tách phân anymore."

msgid "Sorting"
msgstr "Sắp Thứ Tự -- Sorting"

msgid "The sorting operator ``Operators.sort()`` arranges the stacking order of active 1D elements. It takes as argument a binary predicate used as a \"smaller than\" operator to order two 1D elements. ::"
msgstr "The sắp thứ tự thao tác ``Operators.sort()`` arranges the stacking theo thứ tự của đang/hoạt động 1D phần tử. It takes tựa như argument một binary predicate sử dụng tựa như một \"-- smaller than\" thao tác tới theo thứ tự hai 1D phần tử. ::"

msgid "In this code example, the sorting uses the ``Length2DBP1D`` binary predicate to sort the ``Interface1D`` objects in the ascending order in terms of 2D length."
msgstr "Vào cái/điều này code ví dụ, the sắp thứ tự uses the ``-- Length2DBP1D`` binary predicate tới sắp thứ tự the ``-- Interface1D`` vật thể vào the ascending theo thứ tự vào terms của 2D chiều dài."

msgid "The sorting is particularly useful when combined with causal density. Indeed, the causal density evaluates the density of the resulting image as it is modified. If we wish to use such a tool to decide to remove strokes whenever the local density is too high, it is important to control the order in which the strokes are drawn. In this case, we would use the sorting operator to ensure that the most \"important\" lines are drawn first."
msgstr "The sắp thứ tự là particularly useful khi kết hợp với causal tỷ trọng. Indeed, the causal tỷ trọng evaluates the tỷ trọng của the resulting hình ảnh tựa như it là đã bị sửa đổi. If we wish tới sử dụng such một công cụ tới decide tới xóa nét vẽ whenever the địa phương tỷ trọng là too cao, it là important tới điều khiển the theo thứ tự vào cái mà/tức the nét vẽ là drawn. Vào cái/điều này kiểu chữ, we would sử dụng the sắp thứ tự thao tác tới ensure đó/mà the most \"-- important\" (số) đường kẻ/thẳng/dòng là drawn đầu tiên/thứ nhất."

msgid "Stroke Creation"
msgstr "Nét Vẽ Creation"

msgid "Finally, the stroke creation operator ``Operators.create()`` takes the active set of Chains as input and build Strokes. The operator takes two arguments. The first is a unary predicate that works on ``Interface1D`` that is designed to make a last selection on the set of chains. A Chain that does not satisfy the condition will not lead to a Stroke. The second input is a list of shaders that will be responsible for the shading of each built stroke. ::"
msgstr "Finally, the nét vẽ creation thao tác ``Operators.create()`` takes the đang/hoạt động đặt của Chains tựa như đầu vào và xây dựng Nét Vẽ. The thao tác takes hai tham số. The đầu tiên/thứ nhất là một unary predicate đó/mà works bật ``-- Interface1D`` đó/mà là designed tới tạo một cuối lựa chọn bật the đặt của chains. Một Chain đó/mà does đảo nghịch satisfy the condition sẽ đảo nghịch chì tới một Nét Vẽ. The thứ hai đầu vào là một liệt kê của bộ tô bóng đó/mà sẽ be chịu trách nhiệm dành cho the tô bóng của each built nét vẽ. ::"

msgid "In this example, the ``DensityUP1D`` predicate is used to remove all Chains whose mean density is higher than 0.1. Each chain is transformed into a stroke by resampling it so as to have a point every 5 units and assigning to it a constant thickness of 2 units and a dark gray constant color."
msgstr "Vào cái/điều này ví dụ, the ``-- DensityUP1D`` predicate là sử dụng tới xóa toàn bộ Chains whose trung bình tỷ trọng là cao hơn than 0.1. Each chain là transformed thành một nét vẽ by resampling it so tựa như tới có một điểm/chấm mọi/mỗi 5 đơn vị và assigning tới it một hằng số/đồng đều/bất biến độ dày của 2 đơn vị và một dark gray hằng số/đồng đều/bất biến màu sắc."

msgid "User Control on the Pipeline Definition"
msgstr "Người Dùng Điều Khiển bật the Quy Trình Độ Phân Giải -- User Control on the Pipeline Definition"

msgid "Style module writing offers different types of user control, even though individual style modules have a fixed pipeline structure. One is the sequencing of different pipeline control structures, and another is through the definition of functor objects that are passed as argument all along the pipeline."
msgstr "Kiểu mô-đun viết/ghi offers khác thể loại của người dùng điều khiển, đều đặn though cá nhân kiểu modules có một cố định/bất biến/định trước quy trình cấu trúc. Một là the sequencing của khác quy trình điều khiển structures, và another là through the độ phân giải của functor vật thể đó/mà là passed tựa như argument toàn bộ along the quy trình."

msgid "Different pipeline control structures can be defined by sequencing the selection, chaining, splitting, and sorting operations. The stroke creation is always the last operation that concludes a style module."
msgstr "Khác quy trình điều khiển structures có thể be defined by sequencing the lựa chọn, chuyền nối, splitting, và sắp thứ tự các thao tác. The nét vẽ creation là luôn luôn the cuối thao tác đó/mà concludes một kiểu mô-đun."

msgid "Predicates, functions, chaining iterators, and stroke shaders can be defined by inheriting base classes and overriding appropriate methods. See the reference manual entries of the following base classes for more information on the user-scriptable constructs."
msgstr "Predicates, functions, chuyền nối iterators, và nét vẽ bộ tô bóng có thể be defined by inheriting cơ sở classes và overriding appropriate methods. Xin Xem Thêm the tham chiếu thủ công/sách hướng dẫn sử dụng entries của the following cơ sở classes dành cho nhiều/lớn hơn thông tin bật the user-scriptable các cấu trúc."

msgid "Predicates, functions, chaining iterators, and stroke shaders can be defined by inheriting base classes and overriding appropriate methods. See :mod:`Freestyle python module <blender_api:freestyle>` for more information on the user-scriptable constructs."
msgstr "Predicates, functions, chuyền nối iterators, và nét vẽ bộ tô bóng có thể be defined by inheriting cơ sở classes và overriding appropriate methods. Xin Xem Thêm :mod:`Freestyle python module <blender_api:freestyle>` dành cho nhiều/lớn hơn thông tin bật the user-scriptable các cấu trúc."

