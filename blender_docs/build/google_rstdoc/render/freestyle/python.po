# Translations template for PROJECT.
# Copyright (C) 2019 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2019-11-10 01:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

msgid "Python Scripting Mode"
msgstr "Chế Độ Tập Lệnh Python -- Python Scripting Mode"

msgid "The Python Scripting mode offers full programmable line stylizes. In this control mode, all styling operations are written as Python scripts referred to as style modules in the Freestyle terminology. The input to a style module is a view map (i.e. a set of detected feature edges), and the output is a set of stylized strokes."
msgstr "The Python Viết Tập Lệnh -- Scripting Chế Độ offers Toàn Phần programmable Đường Thẳng/Dòng stylizes. Vào cái/điều này Điều Khiển Chế Độ, Toàn Bộ -- Styling Các Thao Tác are written as Python Tập Lệnh referred Tới as Kiểu modules Vào the Phong Cách Tự Do -- Terminology. The Đầu Vào Tới a Kiểu Mô-Đun is a góc nhìn Ánh Xạ (i.e. a Đặt of detected feature Cạnh), và the Đầu Ra is a Đặt of stylized Nét Vẽ."

msgid "A style module is composed of successive calls of five basic operators: selection, chaining, splitting, sorting and stroke creation. The selection operator identifies a subset of input feature edges based on one or more user-defined selection conditions (predicates). The selected edges are processed with the chaining, splitting and sorting operators to build chains of feature edges. These operators are also controlled by user-supplied predicates and functions in order to determine how to transform the feature edges into chains. Finally, the chains are transformed into stylized strokes by the stroke creation operator, which takes a list of user-defined stroke shaders."
msgstr "A Kiểu Mô-Đun is composed of successive calls of five Đơn Giản Thao tác: Lựa Chọn, Chuyền Nối, -- Splitting, Sắp Thứ Tự và Nét Vẽ creation. The Lựa Chọn Thao Tác identifies a Tập hợp con of Đầu Vào feature Cạnh based BẬT một hoặc Nhiều/Lớn Hơn user-defined Lựa Chọn conditions (predicates). The Cái được Chọn Cạnh are processed với the Chuyền Nối, -- Splitting và Sắp Thứ Tự Thao tác Tới Xây Dựng chains of feature Cạnh. These Thao tác are also controlled by user-supplied predicates và -- Functions Vào Theo Thứ Tự Tới determine how Tới Biến Hóa the feature Cạnh into chains. Finally, the chains are transformed into stylized Nét Vẽ by the Nét Vẽ creation Thao Tác, cái mà/tức takes a Liệt Kê -- List of user-defined Nét Vẽ Bộ Tô Bóng -- Shaders."

msgid "Python style modules are stored within blend-files as text data-blocks. External style module files first need to be loaded in the Text Editor. Then the select menu within an entry of the style module stack allows you to select a module from the list of loaded style modules."
msgstr "Python Kiểu modules are stored within blend-Tập Tin as Văn Bản Khối Dữ Liệu -- Data-Blocks. Bên Ngoài Kiểu Mô-Đun Tập Tin Đầu Tiên/Thứ Nhất need Tới be loaded Vào the Văn Bản Trình Biên Soạn. Then the Chọn Trình Đơn within an entry of the Kiểu Mô-Đun -- Stack cho phép you Tới Chọn a Mô-Đun Từ the Liệt Kê -- List of loaded Kiểu modules."

msgid "A screen capture of a style module ``cartoon.py`` loaded in the Text Editor (left), as well as Freestyle options in the Python Scripting mode in the View Layers buttons (right)."
msgstr "A Màn Hình capture of a Kiểu Mô-Đun ``cartoon.py`` loaded Vào the Văn Bản Trình Biên Soạn (trái), as well as Phong Cách Tự Do Tùy Chọn Vào the Python Viết Tập Lệnh -- Scripting Chế Độ Vào the Góc Nhìn Các Tầng Lớp Nút Bấm -- Buttons (phải)."

msgid "Freestyle for Blender comes with a number of Python style modules that can serve as a starting point of your own style module writing. See also the section of the Freestyle Python API in the Blender Python API reference manual for the full detail of style module constructs."
msgstr "Phong Cách Tự Do for Blender comes với a Số of Python Kiểu modules that có thể serve as a Khởi Đầu Điểm/Chấm of your own Kiểu Mô-Đun Viết/Ghi -- Writing. See also the section of the Phong Cách Tự Do Python API Vào the Blender Python API Tham Chiếu Thủ Công for the Toàn Phần Chi Tiết of Kiểu Mô-Đun constructs."

msgid "By T.K. using the Python Scripting mode (`blend-file <https://wiki.blender.org/wiki/File:Turning_Pages.zip>`__, CC0)."
msgstr "(`File:Turning_Pages.zip <https://wiki.blender.org/wiki/File:Turning_Pages.zip>`__, CC0)."

msgid "By T.K. using the Python Scripting mode (`blend-file <https://wiki.blender.org/wiki/File:Lily_Broken_Topology.zip>`__, CC0)."
msgstr "(`File:Lily_Broken_Topology.zip <https://wiki.blender.org/wiki/File:Lily_Broken_Topology.zip>`__, CC0)."

msgid "Writing Style Modules"
msgstr "-- Writing Style Modules"

msgid "A style module is a piece of code responsible for the stylization of Freestyle line drawing. The input of a style module is a set of feature edges called view map (ViewMap). The output is a set of stylized lines also referred to as strokes. A style module is structured as a pipeline of operations that allow for building strokes from the input edges within the view map."
msgstr "A Kiểu Mô-Đun is a piece of code responsible for the stylization of Phong Cách Tự Do Đường Thẳng/Dòng Vẽ. The Đầu Vào of a Kiểu Mô-Đun is a Đặt of feature Cạnh called góc nhìn Ánh Xạ (ViewMap). The Đầu Ra is a Đặt of stylized (Số) Đường Kẻ/Thẳng/Dòng also referred Tới as Nét Vẽ. A Kiểu Mô-Đun is structured as a Quy Trình of Các Thao Tác that cho phép for building Nét Vẽ Từ the Đầu Vào Cạnh within the góc nhìn Ánh Xạ."

msgid "There are five kinds of operations (listed with corresponding operator functions):"
msgstr "There are five kinds of Các Thao Tác (listed với corresponding Thao Tác -- Functions):"

msgid "Selection ``Operators.select()``"
msgstr "Lựa Chọn ``Thao tác.Chọn()``"

msgid "Chaining ``Operators.chain(), Operators.bidirectional_chain()``"
msgstr "Chuyền Nối ``Thao tác.chain(), Thao tác.bidirectional_chain()``"

msgid "Splitting ``Operators.sequential_split(), Operators.recursive_split()``"
msgstr "-- Splitting ``Thao tác.sequential_split(), Thao tác.recursive_split()``"

msgid "Sorting ``Operators.sort()``"
msgstr "Sắp Thứ Tự ``Thao tác.Sắp Thứ Tự()``"

msgid "Stroke creation ``Operators.create()``"
msgstr "Nét Vẽ creation ``Thao tác.Tạo()``"

msgid "The input view map is populated with a set of ViewEdge objects. The selection operation is used to pick up ViewEdges of interest to artists based on user-defined selection conditions (predicates). Chaining operations take the subset of ViewEdges and build Chains by concatenating ViewEdges according to user-defined predicates and functions. The Chains can be further refined by splitting them into smaller pieces (e.g. at points where edges make an acute turn) and selecting a fraction of them (e.g. to keep only those longer than a length threshold). The sorting operation is used to arrange the stacking order of chains to draw one line on top of another. The chains are finally transformed into stylized strokes by the stroke creation operation applying a series of stroke shaders to individual chains."
msgstr "The Đầu Vào góc nhìn Ánh Xạ is populated với a Đặt of ViewEdge Vật Thể. The Lựa Chọn Thao Tác is sử dụng Tới Chọn Lên/Trên ViewEdges of interest Tới artists based BẬT user-defined Lựa Chọn conditions (predicates). Chuyền Nối Các Thao Tác take the Tập hợp con of ViewEdges và Xây Dựng Chains by concatenating ViewEdges according Tới user-defined predicates và -- Functions. The Chains có thể be further refined by -- Splitting them into smaller pieces (e.g. Tại Số Điểm where Cạnh Tạo an acute turn) và Lựa Chọn -- Selecting a Phân Số of them (e.g. Tới -- Keep only those longer than a Chiều Dài Ngưỡng). The Sắp Thứ Tự Thao Tác is sử dụng Tới arrange the stacking Theo Thứ Tự of chains Tới Vẽ một Đường Thẳng/Dòng BẬT Trên/Đỉnh of another. The chains are finally transformed into stylized Nét Vẽ by the Nét Vẽ creation Thao Tác applying a series of Nét Vẽ Bộ Tô Bóng -- Shaders Tới Cá Nhân chains."

msgid "ViewEdges, Chains and Strokes are generically referred to as one-dimensional (1D) elements. A 1D element is a polyline that is a series of connected straight lines. Vertices of 1D elements are called 0D elements in general."
msgstr "ViewEdges, Chains và Nét Vẽ are generically referred Tới as one-dimensional (1D) Phần Tử. A 1D element is a polyline that is a series of Kết Nối Thẳng (Số) Đường Kẻ/Thẳng/Dòng. Điểm Đỉnh of 1D Phần Tử are called 0D Phần Tử Vào Chung Chung."

msgid "All the operators act on a set of active 1D elements. The initial active set is the set of ViewEdges in the input view map. The active set is updated by the operators."
msgstr "Toàn Bộ the Thao tác act BẬT a Đặt of Đang/Hoạt Động 1D Phần Tử. The Khởi Đầu Đang/Hoạt Động Đặt is the Đặt of ViewEdges Vào the Đầu Vào góc nhìn Ánh Xạ. The Đang/Hoạt Động Đặt is updated by the Thao tác."

msgid "Selection"
msgstr "Lựa Chọn -- Selection"

msgid "The selection operator goes through every element of the active set and keeps only the ones satisfying a certain predicate. The ``Operators.select()`` method takes as the argument a unary predicate that works on any ``Interface1D`` that represents a 1D element. For example::"
msgstr "The Lựa Chọn Thao Tác goes through every element of the Đang/Hoạt Động Đặt và keeps only the ones satisfying a certain predicate. The ``Thao tác.Chọn()`` Phương Pháp takes as the argument a unary predicate that works BẬT Bất Cứ ``Interface1D`` that represents a 1D element. For Ví Dụ -- Example::"

msgid "This selection operation uses the ``QuantitativeInvisibilityUP1D`` predicate to select only the visible ``ViewEdge`` (more precisely, those whose quantitative invisibility is equal to 0). The selection operator is intended to selectively apply the style to a fraction of the active 1D elements."
msgstr "cái/điều này Lựa Chọn Thao Tác uses the ``QuantitativeInvisibilityUP1D`` predicate Tới Chọn only the Hữu Hình ``ViewEdge`` (Nhiều/Lớn Hơn precisely, those whose quantitative invisibility is Bằng Nhau Tới 0). The Lựa Chọn Thao Tác is intended Tới selectively Áp Dụng the Kiểu Tới a Phân Số of the Đang/Hoạt Động 1D Phần Tử."

msgid "It is noted that ``QuantitativeInvisibilityUP1D`` is a class implementing the predicate that tests line visibility, and the ``Operators.select()`` method takes an instance of the predicate class as argument. The testing of the predicate for a given 1D element is actually done by calling the predicate instance, that is, by invoking the ``__call__`` method of the predicate class. In other words, the ``Operators.select()`` method takes as argument a functor which in turn takes an ``Interface0D`` object as argument. The Freestyle Python API employs functors extensively to implement predicates, as well as functions."
msgstr "It is noted that ``QuantitativeInvisibilityUP1D`` is a class implementing the predicate that tests Đường Thẳng/Dòng Ẩn-Hiện/Tầm Nhìn, và the ``Thao tác.Chọn()`` Phương Pháp takes an instance of the predicate class as argument. The Thử Nghiệm of the predicate for a given 1D element is actually done by calling the predicate instance, that is, by invoking the ``__call__`` Phương Pháp of the predicate class. Vào Cái/Sắp Đặt Khác words, the ``Thao tác.Chọn()`` Phương Pháp takes as argument a functor cái mà/tức Vào turn takes an ``Interface0D`` Vật Thể as argument. The Phong Cách Tự Do Python API employs functors extensively Tới implement predicates, as well as -- Functions."

msgid "Chaining"
msgstr "Chuyền Nối -- Chaining"

msgid "The chaining operators act on the set of active ``ViewEdge`` objects and determine the topology of the future strokes. The idea is to implement an iterator to traverse the ViewMap graph by marching along ViewEdges. The iterator defines a chaining rule that determines the next ``ViewEdge`` to follow at a given vertex (see ``ViewEdgeIterator``). Several such iterators are provided as part of the Freestyle Python API (see ``ChainPredicateIterator`` and ``ChainSilhouetteIterator``). Custom iterators can be defined by inheriting the ``ViewEdgeIterator`` class. The chaining operator also takes as argument a UnaryPredicate working on ``Interface1D`` as a stopping criteria. The chaining stops when the iterator has reached a ``ViewEdge`` satisfying this predicate during the march along the graph."
msgstr "The Chuyền Nối Thao tác act BẬT the Đặt of Đang/Hoạt Động ``ViewEdge`` Vật Thể và determine the Cấu Trúc Liên Kết of the future Nét Vẽ. The idea is Tới implement an iterator Tới traverse the ViewMap Biểu Đồ by marching along ViewEdges. The iterator defines a Chuyền Nối rule that determines the Tiếp Theo ``ViewEdge`` Tới Đi Theo Tại a given Điểm Đỉnh (see ``ViewEdgeIterator``). Several such iterators are provided as part of the Phong Cách Tự Do Python API (see ``ChainPredicateIterator`` và ``ChainSilhouetteIterator``). Tùy Chỉnh iterators có thể be defined by inheriting the ``ViewEdgeIterator`` class. The Chuyền Nối Thao Tác also takes as argument a UnaryPredicate working BẬT ``Interface1D`` as a stopping criteria. The Chuyền Nối stops when the iterator has reached a ``ViewEdge`` satisfying cái/điều này predicate during the march along the Biểu Đồ."

msgid "Chaining can be either unidirectional ``Operators.chain()`` or bidirectional ``Operators.bidirectional_chain()``. In the latter case, the chaining will propagate in the two directions from the starting edge."
msgstr "Chuyền Nối có thể be either unidirectional ``Thao tác.chain()`` hoặc bidirectional ``Thao tác.bidirectional_chain()``. Vào the latter Kiểu Chữ, the Chuyền Nối will Lan Truyền Vào the hai directions Từ the Khởi Đầu Cạnh."

msgid "The following is a code example of bidirectional chaining::"
msgstr "The following is a code Ví Dụ -- Example of bidirectional Chuyền Nối::"

msgid "The chaining operator uses the ``ChainSilhouetteIterator`` as the chaining rule and stops chaining as soon as the iterator has come to an invisible ``ViewEdge``."
msgstr "The Chuyền Nối Thao Tác uses the ``ChainSilhouetteIterator`` as the Chuyền Nối rule và stops Chuyền Nối as soon as the iterator has come Tới an invisible ``ViewEdge``."

msgid "The chaining operators process the set of active ``ViewEdge`` objects in order. The active ViewEdges can be previously sorted using the ``Operators.sort()`` method (see below). It starts a chain with the first ``ViewEdge`` of the active set. All ViewEdges that have already been involved in the chaining process are marked (in the case of the example above, the time stamp of each ``ViewEdge`` is modified by default), in order not to process the same ``ViewEdge`` twice. Once the chaining reaches a ``ViewEdge`` that satisfies the stopping predicate, the chain is terminated. Then a new chain is started from the first unmarked ``ViewEdge`` in the active set. This operation is repeated until the last unmarked ``ViewEdge`` of the active set was processed. At the end of the chaining operation, the active set is set to the Chains that have just been constructed."
msgstr "The Chuyền Nối Thao tác process the Đặt of Đang/Hoạt Động ``ViewEdge`` Vật Thể Vào Theo Thứ Tự. The Đang/Hoạt Động ViewEdges có thể be previously sorted using the ``Thao tác.Sắp Thứ Tự()`` Phương Pháp (see below). It starts a chain với the Đầu Tiên/Thứ Nhất ``ViewEdge`` of the Đang/Hoạt Động Đặt. Toàn Bộ ViewEdges that have already been involved Vào the Chuyền Nối process are marked (Vào the Kiểu Chữ of the Ví Dụ -- Example above, the Thời Gian stamp of each ``ViewEdge`` is Đã bị Sửa Đổi by Mặc Định), Vào Theo Thứ Tự Đảo Nghịch Tới process the same ``ViewEdge`` twice. Once the Chuyền Nối reaches a ``ViewEdge`` that satisfies the stopping predicate, the chain is terminated. Then a Tạo Mới chain is started Từ the Đầu Tiên/Thứ Nhất unmarked ``ViewEdge`` Vào the Đang/Hoạt Động Đặt. cái/điều này Thao Tác is repeated until the Cuối unmarked ``ViewEdge`` of the Đang/Hoạt Động Đặt was processed. Tại the Kết Thúc -- End of the Chuyền Nối Thao Tác, the Đang/Hoạt Động Đặt is Đặt Tới the Chains that have just been constructed."

msgid "Splitting"
msgstr "-- Splitting"

msgid "The splitting operation is used to refine the topology of each Chain. Splitting is performed either sequentially or recursively. Sequential splitting ``Operators.sequentialSplit()`` in its basic form, parses the Chain at a given arbitrary resolution and evaluates a unary predicate (working on 0D elements) at each point along the Chain. Every time the predicate is satisfied, the chain is split into two chains. At the end of the sequential split operation, the active set of chains is set to the new chains. ::"
msgstr "The -- -- Splitting Thao Tác is sử dụng Tới Tinh Chỉnh the Cấu Trúc Liên Kết of each Chain. -- Splitting is performed either sequentially hoặc recursively. Tuần Tự -- -- Splitting ``Thao tác.sequentialSplit()`` Vào its Đơn Giản form, parses the Chain Tại a given arbitrary Độ Phân Giải và evaluates a unary predicate (working BẬT 0D Phần Tử) Tại each Điểm/Chấm along the Chain. Every Thời Gian the predicate is satisfied, the chain is Tách Phân into hai chains. Tại the Kết Thúc -- End of the Tuần Tự Tách Phân Thao Tác, the Đang/Hoạt Động Đặt of chains is Đặt Tới the Tạo Mới chains. ::"

msgid "In this example, the chain is split every 2 units. A more elaborated version uses two predicates instead of one: One to determine the starting point of the new chain and the other to determine its ending point. This second version can lead to a set of Chains that are disjoint or that overlap if the two predicates are different (see ``Operators.sequentialSplit()`` for more details)."
msgstr "Vào cái/điều này Ví Dụ -- Example, the chain is Tách Phân every 2 Đơn Vị. A Nhiều/Lớn Hơn elaborated Phiên Bản uses hai predicates instead of một: một Tới determine the Khởi Đầu Điểm/Chấm of the Tạo Mới chain và the Cái/Sắp Đặt Khác Tới determine its ending Điểm/Chấm. cái/điều này Thứ Hai Phiên Bản có thể Chì Tới a Đặt of Chains that are disjoint hoặc that Đè Gối if the hai predicates are khác (see ``Thao tác.sequentialSplit()`` for Nhiều/Lớn Hơn Chi Tiết -- Details)."

msgid "Recursive splitting ``Operators.recursiveSplit()`` evaluates a function on the 0D elements along the Chain at a given resolution and find the point that gives the maximum value for the function. The Chain is then split into two at that point. This process is recursively repeated on each of the two new Chains, until the input Chain satisfies a user-specified stopping condition. ::"
msgstr "Recursive -- Splitting ``Thao tác.recursiveSplit()`` evaluates a function BẬT the 0D Phần Tử along the Chain Tại a given Độ Phân Giải và Lùng Tìm the Điểm/Chấm that gives the Tối Đa Giá Trị for the function. The Chain is then Tách Phân into hai Tại that Điểm/Chấm. cái/điều này process is recursively repeated BẬT each of the hai Tạo Mới Chains, until the Đầu Vào Chain satisfies a user-specified stopping condition. ::"

msgid "In the code example above, the Chains are recursively split at points of the highest 2D curvature. The curvature is evaluated at points along the Chain at a resolution of 5 units. Chains shorter than 5 units will not be split anymore."
msgstr "Vào the code Ví Dụ -- Example above, the Chains are recursively Tách Phân Tại Số Điểm of the Cao Nhất 2 Chiều -- 2D curvature. The curvature is evaluated Tại Số Điểm along the Chain Tại a Độ Phân Giải of 5 Đơn Vị. Chains shorter than 5 Đơn Vị will Đảo Nghịch be Tách Phân anymore."

msgid "Sorting"
msgstr "Sắp Thứ Tự -- Sorting"

msgid "The sorting operator ``Operators.sort()`` arranges the stacking order of active 1D elements. It takes as argument a binary predicate used as a \"smaller than\" operator to order two 1D elements. ::"
msgstr "The Sắp Thứ Tự Thao Tác ``Thao tác.Sắp Thứ Tự()`` arranges the stacking Theo Thứ Tự of Đang/Hoạt Động 1D Phần Tử. It takes as argument a binary predicate sử dụng as a \"smaller than\" Thao Tác Tới Theo Thứ Tự hai 1D Phần Tử. ::"

msgid "In this code example, the sorting uses the ``Length2DBP1D`` binary predicate to sort the ``Interface1D`` objects in the ascending order in terms of 2D length."
msgstr "Vào cái/điều này code Ví Dụ -- Example, the Sắp Thứ Tự uses the ``Length2DBP1D`` binary predicate Tới Sắp Thứ Tự the ``Interface1D`` Vật Thể Vào the ascending Theo Thứ Tự Vào terms of 2 Chiều -- 2D Chiều Dài."

msgid "The sorting is particularly useful when combined with causal density. Indeed, the causal density evaluates the density of the resulting image as it is modified. If we wish to use such a tool to decide to remove strokes whenever the local density is too high, it is important to control the order in which the strokes are drawn. In this case, we would use the sorting operator to ensure that the most \"important\" lines are drawn first."
msgstr "The Sắp Thứ Tự is particularly useful when Kết Hợp với causal Tỷ Trọng. Indeed, the causal Tỷ Trọng evaluates the Tỷ Trọng of the resulting Hình Ảnh as it is Đã bị Sửa Đổi. If we wish Tới Sử Dụng such a Công Cụ Tới decide Tới Xóa Nét Vẽ whenever the địa phương Tỷ Trọng is too Cao, it is important Tới Điều Khiển the Theo Thứ Tự Vào cái mà/tức the Nét Vẽ are drawn. Vào cái/điều này Kiểu Chữ, we would Sử Dụng the Sắp Thứ Tự Thao Tác Tới ensure that the most \"important\" (Số) Đường Kẻ/Thẳng/Dòng are drawn Đầu Tiên/Thứ Nhất."

msgid "Stroke Creation"
msgstr "-- Stroke Creation"

msgid "Finally, the stroke creation operator ``Operators.create()`` takes the active set of Chains as input and build Strokes. The operator takes two arguments. The first is a unary predicate that works on ``Interface1D`` that is designed to make a last selection on the set of chains. A Chain that does not satisfy the condition will not lead to a Stroke. The second input is a list of shaders that will be responsible for the shading of each built stroke. ::"
msgstr "Finally, the Nét Vẽ creation Thao Tác ``Thao tác.Tạo()`` takes the Đang/Hoạt Động Đặt of Chains as Đầu Vào và Xây Dựng Nét Vẽ. The Thao Tác takes hai -- Arguments. The Đầu Tiên/Thứ Nhất is a unary predicate that works BẬT ``Interface1D`` that is designed Tới Tạo a Cuối Lựa Chọn BẬT the Đặt of chains. A Chain that does Đảo Nghịch satisfy the condition will Đảo Nghịch Chì Tới a Nét Vẽ. The Thứ Hai Đầu Vào is a Liệt Kê -- List of Bộ Tô Bóng -- Shaders that will be responsible for the Tô Bóng of each built Nét Vẽ. ::"

msgid "In this example, the ``DensityUP1D`` predicate is used to remove all Chains whose mean density is higher than 0.1. Each chain is transformed into a stroke by resampling it so as to have a point every 5 units and assigning to it a constant thickness of 2 units and a dark gray constant color."
msgstr "Vào cái/điều này Ví Dụ -- Example, the ``DensityUP1D`` predicate is sử dụng Tới Xóa Toàn Bộ Chains whose Trung Bình Tỷ Trọng is higher than 0.1. Each chain is transformed into a Nét Vẽ by resampling it so as Tới have a Điểm/Chấm every 5 Đơn Vị và assigning Tới it a Hằng Số/Đồng Đều/Bất Biến Độ Dày of 2 Đơn Vị và a dark gray Hằng Số/Đồng Đều/Bất Biến Màu Sắc."

msgid "User Control on the Pipeline Definition"
msgstr "-- User Control on the Pipeline Definition"

msgid "Style module writing offers different types of user control, even though individual style modules have a fixed pipeline structure. One is the sequencing of different pipeline control structures, and another is through the definition of functor objects that are passed as argument all along the pipeline."
msgstr "Kiểu Mô-Đun Viết/Ghi -- Writing offers khác Thể Loại -- Types of Người Dùng Điều Khiển, Đều Đặn though Cá Nhân Kiểu modules have a Cố Định/Bất Biến/Định Trước Quy Trình Cấu Trúc. một is the sequencing of khác Quy Trình Điều Khiển structures, và another is through the Độ Phân Giải of functor Vật Thể that are passed as argument Toàn Bộ along the Quy Trình."

msgid "Different pipeline control structures can be defined by sequencing the selection, chaining, splitting, and sorting operations. The stroke creation is always the last operation that concludes a style module."
msgstr "khác Quy Trình Điều Khiển structures có thể be defined by sequencing the Lựa Chọn, Chuyền Nối, -- Splitting, và Sắp Thứ Tự Các Thao Tác. The Nét Vẽ creation is Luôn Luôn the Cuối Thao Tác that concludes a Kiểu Mô-Đun."

msgid "Predicates, functions, chaining iterators, and stroke shaders can be defined by inheriting base classes and overriding appropriate methods. See the reference manual entries of the following base classes for more information on the user-scriptable constructs."
msgstr "Predicates, -- Functions, Chuyền Nối iterators, và Nét Vẽ Bộ Tô Bóng -- Shaders có thể be defined by inheriting Cơ Sở classes và overriding appropriate -- Methods. See the Tham Chiếu Thủ Công entries of the following Cơ Sở classes for Nhiều/Lớn Hơn Thông Tin BẬT the user-scriptable constructs."

msgid "Predicates, functions, chaining iterators, and stroke shaders can be defined by inheriting base classes and overriding appropriate methods. See :mod:`Freestyle python module <blender_api:freestyle>` for more information on the user-scriptable constructs."
msgstr "Predicates, -- Functions, Chuyền Nối iterators, và Nét Vẽ Bộ Tô Bóng -- Shaders có thể be defined by inheriting Cơ Sở classes và overriding appropriate -- Methods. See :mod:`Phong Cách Tự Do python Mô-Đun <blender_api:Phong Cách Tự Do>` for Nhiều/Lớn Hơn Thông Tin BẬT the user-scriptable constructs."

